autoload -Uz promptinit && promptinit

autoload -Uz vcs_info

setopt prompt_subst


GIT_PROMPT_SYMBOL="%{%G%F{blue}±%}"
GIT_PROMPT_PREFIX="%{%G%F{green}[%f%}"
GIT_PROMPT_SUFFIX="%{%G%F{green}]%f%}"
GIT_PROMPT_AHEAD="%{%F{red}%}ANUM%{%f%}"
GIT_PROMPT_BEHIND="%{%F{cyan}%}BNUM%{%f%}"
GIT_PROMPT_MERGING="%{%G%B%F{magenta}⚡︎%f%b%}"
GIT_PROMPT_UNTRACKED="%{%G%B%F{red}●%f%b%}"
GIT_PROMPT_MODIFIED="%{%G%B%F{yellow}●%f%b%}"
GIT_PROMPT_STAGED="%{%G%B%F{green}●%f%b%}"

# Show Git branch/tag, or name-rev if on detached head
parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
parse_git_state() {

  # Compose this value via multiple conditional appends.
  local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi

  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi

  if [[ -n $GIT_STATE ]]; then
    # echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
    echo "$GIT_STATE "
  fi

}

# If inside a Git repository, print its branch and state
git_prompt_string() {
  #local git_where="$(parse_git_branch)"
  #[ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{%F{yellow}%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
  local git_where="$(parse_git_branch)"
  [ -n "$git_where" ] && echo "$GIT_PROMPT_PREFIX$(parse_git_state)%{%F{yellow}%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
}

# RPROMPT="$(git_prompt_string)"
# PROMPT=$'$fg[green]%n$reset_color @ $fg[red]%M$reset_color in %F{166}%d$reset_color\n \$ '

precmd() {
  # RPROMPT=$'$(git_prompt_string)'
  PROMPT=$'%F{236}${(r:$COLUMNS::\u2500:)}%f%{\e(B%}%F{green}%n%f at %F{red}%M%f in %F{166}%d%f $(git_prompt_string)$prompt_newline\$ '
}
